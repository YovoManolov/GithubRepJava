
class ThreadGroupDemo {

	public static void main(String[] args) {
		ThreadGroup groupA  = new ThreadGroup("Group A");
		ThreadGroup groupB =  new ThreadGroup("Group B");
		
		NewThread ob1 = new NewThread("One" , groupA);
		NewThread ob2 = new NewThread("Two", groupA);
		NewThread ob3 = new NewThread("Three" , groupB);
		NewThread ob4 = new NewThread("Four", groupB);
		
		System.out.println("Here is output from list(): " );
		groupA.list();
		groupB.list();
		
		System.out.println("Suspending Group A");
		
		
		// !!!!!!!!!!!!!creating array of threads witch 
		//contains the number of threads in the thread group A
		
		Thread tga[] = new Thread [groupA.activeCount()];
		groupA.enumerate(tga);
		//Puts the active threads that 
		//comprise the invoking thread group
		//including those in subgroups) into the
		//group array. 
		// The active threads from groupA into the groupArray tga ;
        
		for(int i = 0 ;i<tga.length ; i++){
			((NewThread)tga[i]).mysuspend();  //suspend each thread
		}
		
		try{
			Thread.sleep(4000);
		} catch ( InterruptedException e) {
			System.out.println("Main thread interrupted .");
		}
		
		System.out.println("Resuming Group A");
		for(int i = 0; i<tga.length ;i ++){
			((NewThread)tga[i]).myresume(); // Resume threads in group
		}
		
		//wait for threads to finish
		try{
		    System.out.println(" Waiting for threads to finish. ");
		    ob1.join();
		    ob2.join();
		    ob3.join();
		    ob4.join();
		}catch(Exception e){
			System.out.println("Exception in Main thread");
		}
		
		System.out.println("Main thread exiting .");
		
	}

}
