Session based authentication 
	
		1.send login data: username, password 
		2.Save Session to database 
		3.return cookies(SessionId)
		4.send Authenticated request with cookie(sessionId) 
		5.Check sessionId with stored session 
		6.return response 

JWT 
	User login state is encoded in JWT by the server and send to the Client. Nowaday many RESTful APIs use it. 


	1. send login data (username/password)
	2. create JWT with 'secret' 
	3. return JWT

	4. send Authenticated request with JWT in Header 
	5. validate JWT
	6. return Response 


	Every request from client should be attached that JWT (commonly at header). The sever will validate the JWT and return Response. 

	For storing JWT on the client side it depends on the platform 
	we use :
		Browser :Local Storage 
		IOS: Keychain 
		Android: SharedPreferences 

	How to create JWT 

	3 important parts of JWT: 

	Header 
	Payload 
	Signiture 

	Header - 
		answers the question: 

		How will we calculate JWT? 

	{
	"typ":"JWT",
	"alg":"HS256"
	}

	typ= type (Indicates that Token type hire is JWT.)
	alg stands for 'algorithm' which is hash algorithm for generating Token signature. HS256 stands for : HMAC-SHA256 - the algorithm which uses Secret Key 

	Payload
		 helps us to answer:
		 	What do we want to store in JWT ? 

	{
		"userId": "abcd12345ghijk"
		"username": "bezkoder",
		"email": "contact@bezkoder.com",
		// standard fields
		"iss": "zKoder, author of bezkoder.com",
		"iat": 1570238918,
		"exp": 1570238992
	}


We also have some standart fields which are optional 
iss (Issuer): who issues the JWT 
iat (Issuar at): time the JWT was issued at 
exp (Expiration time): JWT expiratinon time 



Signiture 
	const data =
		 Base64UrlEncode(header) + '.' + Base64UrlEncode(payload);

	const hashedData = Hash(data, secret);
	const signiture = Base64UrlEncode(hashedData);


After having Header,Payload,Signiture, we're gonna combine them into JWT standard structure: 
	header.payload.signiture

const enocdedHeader = base64urlEncode(header);
const enocdedPayload = base64urlEncode(payload);

const data = encodedHeader + "." +encodedPayload; 
const hashedData = Hash(data, secret);
const signiture = base64urlEncode(hasedData);

const JWT = encodedHeader + "." + encodedPayload +"."+signiture;


How JWT secures our data 
JWT does NOT secure our data
JWT only enode and hash data it does not encript data

the purpose of JWT is to prove that the data is generated by an authentic source. 

The secret string for generating JWT must be stored securely in the
server side. 

When receiving JWT from client, the Server get the Signiture, verify the signiture is correctly hashed by the same algorithm and Secret string as above. If It mathes the Server's signiture, the JWT is valid. 

<a class="btn btn-block btn-social btn-twitter" onclick="_gaq.push(['_trackEvent', 'btn-social', 'click', 'btn-md']);"><i class="fa fa-twitter"></i>Sign in with Twitter</a>


<a class="btn btn-block btn-social btn-google" onclick="_gaq.push(['_trackEvent', 'btn-social', 'click', 'btn-md']);"><i class="fa fa-google"></i>Sign in with Google</a>




 <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta property="og:title" content="Social Buttons for Bootstrap">
    <meta property="og:description" content="Social Sign-In Buttons made in pure CSS based on Bootstrap and Font Awesome!">
    <meta property="og:type" content="website">
    <meta property="og:url" content="http://lipis.github.io/bootstrap-social/">
    <meta property="og:image" content="http://lipis.github.io/bootstrap-social/assets/img/bootstrap-social.png">

    <title>Social Buttons for Bootstrap</title>
    <link href="assets/css/bootstrap.css" rel="stylesheet">
    <link href="assets/css/font-awesome.css" rel="stylesheet">
    <link href="assets/css/docs.css" rel="stylesheet">

    <link href="bootstrap-social.css" rel="stylesheet">

    <script id="twitter-wjs" src="https://platform.twitter.com/widgets.js"></script><script type="text/javascript" async="" src="https://ssl.google-analytics.com/ga.js"></script><script type="text/javascript">
      var _gaq = _gaq || [];
      _gaq.push(['_setAccount', 'UA-42119746-1']);
      _gaq.push(['_trackPageview']);

      (function() {
        var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
        ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
        var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
      })();
    </script>
  <script charset="utf-8" src="https://platform.twitter.com/js/button.93a0c25c2d2f3081c705c98c2d9dec0e.js"></script>



The JavaScript origin in the request, http://localhost:4200, does not match the ones authorized for the OAuth client. Visit https://console.developers.google.com/apis/credentials/oauthclient/496244831513-h489l6l21o4ua5pgfb6vrbt921rpb5t2.apps.googleusercontent.com?project=496244831513 to update the authorized JavaScript origins.


<div class="container mt-5">
    <h2>Google Login</h2>
    <div class="row mt-5">
      <div class="col-md-4 mt-2 m-auto ">
          <button class="loginBtn loginBtn--google" #loginRef>
              Login with Google
          </button>
      </div>    
    </div>
  </div>

  <div class="container mt-5">
    <h2>Facebook Login</h2>
    <div class="row mt-5">
      <div class="col-md-4 mt-2 m-auto ">
          <button class="loginBtn loginBtn--facebook" (click)="login()">
              Login with Facebook
            </button>
      </div>    
    </div>
  </div>









